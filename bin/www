#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require("../app");
var debug = require("debug")("api:server");
var http = require("http");
var nbr = 0;

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "3020");
app.set("port", port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

const { Server: socketServer } = require("socket.io");
const io = new socketServer(server, {
  cors: {
    origin: "*",
  },
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, function () {
  console.log("Listening on port ", port);
});
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}

io.on("connection", (socket) => {
  
  console.log("a user connected    "+ socket.id);
  
  socket.on("ouaa", ({ msg }) => {
    //  console.log(JSON.stringify(socket));
    console.log(msg + " from " + socket.id);
    io.emit("beep",{msg:"PIPIP"});
  });

  setTimeout(() => {
    io.emit("message", { msg: "Wow Connected "+ socket.id });
  }, 1000);

  setTimeout(() => {
    io.emit("message", { msg: "Step1 "+ socket.id });
  }, 5000);

  setTimeout(() => {
    io.emit("message", { msg: "Step2 "+ socket.id });
  }, 9000);

  setTimeout(() => {
    io.emit("message", { msg: "Done "+ socket.id });
  }, 13000);

  io.emit("connectedCount", { nbr: ++nbr });

  socket.on("disconnect", () => {
    io.emit("connectedCount", { nbr: --nbr });
    console.log("user disconnected");
  });

});
